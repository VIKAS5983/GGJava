package gg.mixed;

import gg.binaryTree.TreeNode;
import gg.binaryTree.TreeNodeInsertion;
import gg.doubly.Node;
import gg.doubly.doubleLinkedListInsertion;

public class circulationDoubleLinkedListConvertion {

	public static void main(String args[]){
		TreeNode n1=new TreeNode(10);
		TreeNodeInsertion.insertNode(n1, 11);
		TreeNodeInsertion.insertNode(n1, 5);
		TreeNodeInsertion.insertNode(n1, 6);
		TreeNodeInsertion.insertNode(n1, 8);
		TreeNodeInsertion.insertNode(n1, 1);
		TreeNode.printTreeNode(n1);
		Node head=ConvertBinaryTreeToCircularLinkedList(n1);
		printCircularDoubleLinkedList(head);

	}	
	static class Node{
		int data;
		Node prev;
		Node next;
		public Node(int data){
			this.data=data;
		}
	}
	public static void printCircularDoubleLinkedList(Node head){
		
		Node temp=head;
		System.out.print("Circular Data : ");
		while(temp.next!=head){
			System.out.print(temp.data +" ");
			temp=temp.next;
		}
		System.out.println(temp.data);
		
	}
	
	public static Node ConvertBinaryTreeToCircularLinkedList(TreeNode head){
		
		Node nHead=convertionUtil(null,head );
		
		return h1;
	}
	
	public static Node convertionUtil(Node head, TreeNode tHead){
		if(tHead==null)
			return null;
		convertionUtil(head,tHead.left);
		Node head1=circularLinkedListSortedInsertion(head,tHead.data);
		convertionUtil(head,tHead.left);
		return head1;
	}
	
	public static Node circularLinkedListSortedInsertion(Node head,int data){
		if(head==null){
			Node n=new Node();
		}
		Node n=new Node(data);
		if(head.data>data){
			n.prev=head.prev;
			n.next=head;
			head.prev=n;
			n.prev.next=n;
			return n;
		}
		Node temp=head;
		while(temp.next!=head && temp.data<data){
			temp=temp.next;
		}
		
		if(temp.next==head)
		{
			n.next=temp;
			temp.prev=n;
			n.prev=temp;
			temp.next=n;
		}
		return head;
	}
}

package gg.binaryTree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class TreeNodeLevelOrder {

	public static void main(String args[]){
		TreeNode head=TreeNodeInsertion.insertNode(null,1);
		head.left=new TreeNode(2);
		head.right=new TreeNode(3);
		head.left.left=new TreeNode(4);
		head.left.right=new TreeNode(5);
		System.out.print("Iterative: ");
		iterativeLevelOrderTraversal(head);
		System.out.print("\n Recursive:");
		recursiveLevelOrderTraversal(head);System.out.println();
		
		System.out.print("ReverseLevelOrder ");
		reverseLevelOrder(head);
	}
	
	public static void iterativeLevelOrderTraversal(TreeNode head){
		//Same as BreadthFirstTraversal 
	
	}
	static int maxLevel=0;
	public static void recursiveLevelOrderTraversal(TreeNode head){
		findMaxLevelMethod(head, 0);
		
		System.out.println("MaxLevel is "+ maxLevel);
		for(int i=1;i<=maxLevel;i++){
			recursiveUtilLevelOrderTraversal(head, i);
			System.out.println();
		}
	}
	
	public static void findMaxLevelMethod(TreeNode head,int level){
		if(head==null){
			return;
		}
			level++;
		

		if(maxLevel<level){
			maxLevel=level;
		}

		findMaxLevelMethod(head.left, level);
		
		findMaxLevelMethod(head.right, level);
	}

	public static void recursiveUtilLevelOrderTraversal(TreeNode head,int level){
		if(head==null){
			return;
		}
		level--;
		if(level==0)
		System.out.print(head.data+" ");
		
		recursiveUtilLevelOrderTraversal(head.left, level);

		recursiveUtilLevelOrderTraversal(head.right, level);

	}
	public static void reverseLevelOrder(TreeNode head){
		Stack<TreeNode> st=reverseLevelOrderTraversalUtil(head);
		
		Stack<TreeNode> rst=new Stack<TreeNode>();
		System.out.println("    -- "+st.size());
		
		while(!st.isEmpty()){
			System.out.print( "asd");

			TreeNode temp=st.pop();
			if(temp==null){
				while(!rst.isEmpty()){
					System.out.print( "asd");
				}
				System.out.println();
			}else{
				rst.push(temp);
				System.out.println(temp.data);
			}
				
			}
		}
	
	public static Stack reverseLevelOrderTraversalUtil(TreeNode head){
		
		Queue<TreeNode> q=new LinkedList<TreeNode>();
		
		TreeNode temp=head;
		Stack<TreeNode> st=new Stack<TreeNode>();

		q.add(head);

		while(!q.isEmpty()){
			temp=q.poll();
			st.add(temp);
			if(temp.left!=null)
				q.add(temp.left);
			if(temp.right!=null)
				q.add(temp.right);

		}
		while(!st.isEmpty()){
			System.out.print("->"+st.pop().data+" ");
		}
		
		return st;
	}
	
	public static void specificOrderLevelOrderTraversal(TreeNode head,Queue<TreeNode> q){
		if(head==null){
			return;
		}
		
	}
	
}

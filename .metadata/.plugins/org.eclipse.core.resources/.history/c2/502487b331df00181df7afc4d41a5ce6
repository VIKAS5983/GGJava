package gg.mixed;

import gg.binaryTree.TreeNode;
import gg.binaryTree.TreeNodeInsertion;
import gg.doubly.Node;
import gg.doubly.doubleLinkedListInsertion;

public class circulationDoubleLinkedListConvertion {

	public static void main(String args[]){
		TreeNode n1=new TreeNode(10);
		TreeNodeInsertion.insertNode(n1, 11);
		TreeNodeInsertion.insertNode(n1, 5);
		TreeNodeInsertion.insertNode(n1, 6);
		TreeNodeInsertion.insertNode(n1, 8);
		TreeNodeInsertion.insertNode(n1, 1);
		TreeNode.printTreeNode(n1);
		Node head=ConvertBinaryTreeToCircularLinkedList(n1);
		printCircularDoubleLinkedList(head);

	}	
	static class Node{
		int data;
		Node prev;
		Node next;
		public Node(int data){
			this.data=data;
		}
	}
	public static void printCircularDoubleLinkedList(Node head){
		
		Node temp=head;
		System.out.print("Circular Data : ");
		while(temp.next!=head){
			System.out.print(temp.data +" ");
			temp=temp.next;
		}
		System.out.println(temp.data);
		
	}
	
	public static Node ConvertBinaryTreeToCircularLinkedList(TreeNode head){
		
		
		Node middle=convertionUtil(head);
		Node temp=middle;
		while(temp.prev!=null){
			temp=temp.prev;
		}
		Node h1=temp;
		
		temp=middle;
		while(temp.next!=null){
			temp=temp.next;

		}
		Node t1=temp;
		
		t1.next=h1;
		h1.prev=t1;
		
		
		return h1;
	}
	
	public static Node convertionUtil(TreeNode tHead){
		if(tHead==null)
			return null;
		convertionUtil(tHead);
		Node=circularLinkedListSortedInsertion(tHead.data, data);
					
		return null;
	}
	
	public static Node circularLinkedListSortedInsertion(Node head,int data){

		Node n=new Node(data);
		if(head.data>data){
			n.prev=head.prev;
			n.next=head;
			head.prev=n;
			n.prev.next=n;
			return n;
		}
		Node temp=head;
		while(temp.next!=head && temp.data<data){
			temp=temp.next;
		}
		
		if(temp.next==head)
		{
			n.next=temp;
			temp.prev=n;
			n.prev=temp;
			temp.next=n;
		}
		return head;
	}
}

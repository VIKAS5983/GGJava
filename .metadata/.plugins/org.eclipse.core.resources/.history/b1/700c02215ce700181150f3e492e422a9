package gg.binaryTree;

import java.util.HashMap;
import java.util.Map;

public class TreeNodePathReversal {

		public static void main(String args[]){
			TreeNode head=TreeNodeInsertion.insertNode(null,1);
			head.left=new TreeNode(2);
			head.right=new TreeNode(3);
			head.left.left=new TreeNode(4);
			head.left.right=new TreeNode(5);
			System.out.print("Iterative: ");
			TreeNodeTraversel.inOrderTraversalIterator(head);

			reversePath(head);
			System.out.print("Iterative: After reverseAfterPath");
			
			TreeNodeTraversel.inOrderTraversalIterator(head);
			
		}
		
		public static void reversePath(TreeNode head){
			
		}
		
		static Map<Integer, Integer> mp=new HashMap<Integer,Integer>();
		
		public static int reversePathUtil(TreeNode head, int level,int data){
			if(head==null){
				return -1;
			}
			if(head.data==data){
				head.data=mp.get(0);
				return level;
			}
			mp.put(level, head.data);
			
			int fLevel=reversePathUtil(head.left,level+1,data);
			
			reversePathUtil(head.right,level+1,data);

			
		}

}

package gg.construction;

import java.util.Vector;

import gg.binaryTree.TreeNode;
import gg.binaryTree.TreeNodeTraversel;

public class TreeConstructionFromPreOrderAndInorder {

	public static void main(String args[]){
		int[] pre={1,2,4,7,5,8,9,3,6};
		int[] in={7,4,2,8,5,9,1,3,6};
		Vector<Integer> preV=new Vector<Integer>();
		for(int i=0;i<pre.length;i++)
		preV.add(pre[i]);
		
		Vector<Integer> inV=new Vector<Integer>();
		for(int i=0;i<in.length;i++)
		inV.add(in[i]);

		
		TreeConverstionFromPreOrderAndInorder(preV,inV);
	}
	
	public static TreeNode TreeConverstionFromPreOrderAndInorder(Vector<Integer> pre,Vector<Integer> inV){
		
		Vector<Integer> left=new Vector<Integer>();
		Vector<Integer> right=new Vector<Integer>();
		
		TreeNode head=new TreeNode(pre.get(0));
		
		int headIndex=searchVector(inV, pre.get(0));
		
		left.addAll(inV.subList(0, headIndex-1));
		right.addAll(inV.subList(headIndex+1, inV.size()-1));
		
		
		TreeConverstionUtil(head,left,right,pre);
		
		TreeNodeTraversel.inOrderTraversol(head);
		
		return null;
	}
	
	public static void TreeConverstionUtil(TreeNode head,Vector<Integer> left, Vector<Integer> right,Vector<Integer> pre){
		if(pre.size()==0){
			return ;
		}
		Vector<Integer> vCons=null;
		int nextIn=-1;
		if(searchVector(left,pre.get(0))!=-1){
			vCons=left;
			head.left=new TreeNode(pre.get(0));
			pre.remove(0);
			nextIn=searchVector(vCons, pre.get(0));
			if(nextIn==-1)
				return;
			Vector<Integer> subL=new Vector<Integer>();
			Vector<Integer> subR=new Vector<Integer>();
			subL.addAll(vCons.subList(0, nextIn-1));
			subR.addAll(vCons.subList(nextIn+1, left.size()-1));
			TreeConverstionUtil(head.left, subL, subR, pre);
			
		}else{
			vCons=right;
			head.right=new TreeNode(pre.get(0));
			pre.remove(0);
			nextIn=searchVector(vCons, pre.get(0));
			
			if(nextIn==-1)
				return;

			Vector<Integer> subL=new Vector<Integer>();
			Vector<Integer> subR=new Vector<Integer>();
			subL.addAll(right.subList(0, nextIn-1));
			subR.addAll(right.subList(nextIn+1, vCons.size()-1));
			TreeConverstionUtil(head.right, subL, subR, pre);
			

		}
		
		return ;
	}
	
	public static int searchVector(Vector<Integer> v,int searchValue){
		
		for(int i=0;i<v.size();i++){
			if(v.get(i)==searchValue)
				return i;
		}
		return -1;
	}
	
	
}

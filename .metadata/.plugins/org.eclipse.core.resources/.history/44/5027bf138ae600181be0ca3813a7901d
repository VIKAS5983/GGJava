package gg.binaryTree;

import java.util.Stack;

class Node{
	public Node(char data){
		this.data=data;
	}
	char data;
	Node left;
	Node right;
}

public class ExpressionTree {
	
    public static void main(String args[]) { 
    	  
        ExpressionTree et = new ExpressionTree(); 
        String postfix = "ab+ef*g*-"; 
        char[] charArray = postfix.toCharArray(); 
        Node root = et.constructTree(charArray); 
        System.out.println("infix expression is"); 
        inorder(root); 
    } 
    public static void inorder(Node head){
    	if(head==null)
    		return;
    	
    	inorder(head.left);
    	System.out.println(head.data+" ");
    	inorder(head.right);
    }
    
    public Node constructTree(char[] charArray){
    	
    	Stack<Node> st=new Stack<Node>();
    	
    	for(int i=0;i<charArray.length;i++)
    	{
    		if(isOperand(charArray[i])){
    			Node right=st.pop();
    			Node left=st.pop();
    			Node n=new Node(charArray[i]);
    			n.left=left;
    			n.right=right;
    		}else
    			st.push(new Node(charArray[i]));
    		
    	}
    	return st.pop();
    }
    public static boolean isOperand(char ele){
    	try{
    		Integer.parseInt(ele);
    	}catch(Exception e){
    		
    	}
    	return false;
    }
    
}

package gg.single;

import java.util.Hashtable;

import javax.swing.text.DefaultEditorKit.CutAction;

public class LinkedListReverseInGroups {
	public static void main(String args[]){
		Node head=new Node(1);
		for(int i=2;i<10;i++)
			head=LinkedListInsertion.insertEnd(head,i);

        head.next.next.next.next.next = head.next.next; 

		/*
		head=LinkedListInsertion.insertEnd(head,9);
		head=LinkedListInsertion.insertEnd(head,12);
		head=LinkedListInsertion.insertEnd(head, 6);
		head=LinkedListInsertion.insertEnd(head,7);
		head=LinkedListInsertion.insertEnd(head,10);
		head=LinkedListInsertion.insertEnd(head,15);
		head=LinkedListInsertion.insertEnd(head,12);
		head=LinkedListInsertion.insertEnd(head,2);
		head=LinkedListInsertion.insertEnd(head,8);
		head=LinkedListInsertion.insertEnd(head,122);
		head=LinkedListInsertion.insertEnd(head,52);
		head=LinkedListInsertion.insertEnd(head,6);
	*/
		System.out.println("Does loop exists in the linked list " + isLoopLinkedList(head));
		
		removeLoopFromLinkedList(head);
		//head=reverseLinkedListInGroups(head, 3);
		LinkedListInsertion.printAllNodes(head);
	}
	
	public static Node reverseLinkedListInGroups(Node head, int size){
		if(head==null)
			return null;
		int count=0;
		Node nhead=head;
		Node prev=null;
		Node temp=head;
		while(temp!=null && count!=size){
			Node temp1=temp.next;
			temp.next=prev;
			prev=temp;
			temp=temp1;
			count++;
		}

		nhead.next=reverseLinkedListInGroups(temp, size);
		
		return prev;
	}
	
	
	public static boolean isLoopLinkedList(Node head){
		
		Node temp=head;
		Node temp1=head;
		while(temp!=null && temp1!=null && temp1.next!=null){
			if(temp==temp1)
				return true;
			
			temp=temp.next;
			temp1=temp1.next.next;
		}
		
		return false;
	}
	
	public static Node removeLoopFromLinkedList(Node head){
			
	      Hashtable h = new Hashtable();
	      Node temp=head;
	      
	      while(temp!=null && h.get(temp.next)!=null){
	    
	       h.put(temp.next, temp.data);
	      }
		return null;
	}
	

}
